"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[659],{4444:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:3},l="FormikWizard",p={unversionedId:"introduction/formik-wizard-provider",id:"introduction/formik-wizard-provider",isDocsHomePage:!1,title:"FormikWizard",description:"&lt;FormikWizard /&gt;",source:"@site/docs/introduction/formik-wizard-provider.md",sourceDirName:"introduction",slug:"/introduction/formik-wizard-provider",permalink:"/formik-wizard-form/docs/introduction/formik-wizard-provider",editUrl:"https://github.com/mjangir/formik-wizard-form/blob/master/website/docs/introduction/formik-wizard-provider.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"How To Use?",permalink:"/formik-wizard-form/docs/introduction/how-to-use"},next:{title:"useFormikWizard",permalink:"/formik-wizard-form/docs/introduction/use-formik-hook"}},d=[{value:"&lt;FormikWizard /&gt;",id:"formikwizard-",children:[{value:"<code>steps: Step[]</code>",id:"steps-step",children:[]},{value:"<code>activeStepIndex: number</code>",id:"activestepindex-number",children:[]},{value:"<code>validateOnNext: boolean</code>",id:"validateonnext-boolean",children:[]},{value:"<code>children: ((props: RenderProps) =&gt; React.ReactNode) | React.ReactElement&lt;RenderProps&gt;</code>",id:"children-props-renderprops--reactreactnode--reactreactelementrenderprops",children:[]}]},{value:"Example",id:"example",children:[]}],c={toc:d};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"formikwizard"},"FormikWizard"),(0,i.kt)("h2",{id:"formikwizard-"},"<","FormikWizard /",">"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { FormikWizard } from 'formik-wizard-form';\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<FormikWizard />")," is a replacement of original ",(0,i.kt)("inlineCode",{parentName:"p"},"<Formik />")," component and accepts all the formik props along with the following listed:"),(0,i.kt)("h3",{id:"steps-step"},(0,i.kt)("inlineCode",{parentName:"h3"},"steps: Step[]")),(0,i.kt)("p",null,"steps is an array of form step objects where each object contains the information about a particular step component. Each step object must satisfy the below typescript type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type Step = {\n  /** Validation schema object for the current step */\n  validationSchema?: any | (() => any);\n\n  /** Handler to be called before moving to previous step */\n  beforePrev?: (\n    values: FormikValues,\n    formikBag: FormikProps<FormikValues>,\n    currentStepIndex: number\n  ) => Promise<any>;\n\n  /** Handler to be called before moving to next step */\n  beforeNext?: (\n    values: FormikValues,\n    formikBag: FormikProps<FormikValues>,\n    currentStepIndex: number\n  ) => Promise<any>;\n\n  /** React functional or class component */\n  component: React.ComponentType<FormikProps<FormikValues>>;\n};\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"validationSchema:")," is a Yup object or anything which Formik accepts. Please provide all the validation specific to this particular step."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"beforePrev:")," should be a function which will be called before moving to previous step on click of prev button. The function must return a ",(0,i.kt)("inlineCode",{parentName:"li"},"Promise"),". Rejecting this promise won't let you go to previous step."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"beforeNext:")," is same as beforePrev but applied on next step."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"component:")," must be a react functional or class component which will get all the formik methods and properties as its props when rendered.")),(0,i.kt)("h3",{id:"activestepindex-number"},(0,i.kt)("inlineCode",{parentName:"h3"},"activeStepIndex: number")),(0,i.kt)("p",null,"activeStepIndex is the index of step which you want to make active by default on form render. Starting from zero."),(0,i.kt)("h3",{id:"validateonnext-boolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"validateOnNext: boolean")),(0,i.kt)("p",null,"validateOnNext is a boolean flag which controls whether to by pass the form validations or prevent moving backward/forward in case of invalid form."),(0,i.kt)("h3",{id:"children-props-renderprops--reactreactnode--reactreactelementrenderprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"children: ((props: RenderProps) => React.ReactNode) | React.ReactElement<RenderProps>")),(0,i.kt)("p",null,"children prop type is the same as formik but to render stepper forms, it must be a function which will get ",(0,i.kt)("inlineCode",{parentName:"p"},"RenderProps")," as its arguments."),(0,i.kt)("p",null,"If you provide ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," as a function, it will provide the following arguments in return along with the standard/original formik render props."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface RenderProps extends FormikProps<FormikValues> {\n  /** Handler to be called on previous button click */\n  handlePrev: () => void;\n\n  /** Handler to be called on next button click */\n  handleNext: () => void;\n\n  /** Current step index in number */\n  currentStepIndex?: number;\n\n  /** Flag to indicate previous button should be disabled */\n  isPrevDisabled: boolean;\n\n  /** Flag to indicate next button should be disabled */\n  isNextDisabled: boolean;\n\n  /** Flag to indicate current step is first step */\n  isFirstStep: boolean;\n\n  /** Flag to indicate current step is last step */\n  isLastStep: boolean;\n\n  /** Current step component renderer */\n  renderComponent: () => React.ReactNode;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"handlePrev"),": should be provided to previous button onClick prop. It will take you to the previous step."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"handleNext"),": should be provided to next button onClick prop. It will take you to the next step."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"currentStepIndex"),": read-only property which returns the index of current step."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"isPrevDisabled"),": read only prop which returns Boolean value for whether previous button should be disabled."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"isNextDisabled"),": read only prop which returns Boolean value for whether next button should be disabled."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"isFirstStep"),": read only prop which returns boolean value for whether the current active step is the first step."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"isLastStep"),": read only prop which returns boolean value for whether the current active step is the last step."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"renderComponent"),": is the method which is responsible for rendering current step component.")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"<FormikWizard\n  initialValues={{ firstName: '', email: '', designation: '' }}\n  onSubmit={values => console.log(values)}\n  validateOnNext\n  activeStepIndex={0}\n  steps={[\n    {\n      component: PersonalDetails,\n      validationSchema: Yup.object().shape({\n        firstName: Yup.string().required('First name is required'),\n      }),\n    },\n    {\n      component: ContactDetails,\n      validationSchema: Yup.object().shape({\n        email: Yup.string().required('Email is required'),\n      }),\n    },\n    {\n      component: JobDetails,\n      validationSchema: Yup.object().shape({\n        designation: Yup.string().required('Designation is required'),\n      }),\n    },\n  ]}\n>\n  {({\n    renderComponent,\n    handlePrev,\n    handleNext,\n    isNextDisabled,\n    isPrevDisabled,\n    isLastStep,\n  }) => (\n    <>\n      {renderComponent()}\n      <button type=\"button\" onClick={handlePrev} disabled={isPrevDisabled}>\n        Previous\n      </button>\n      <button type=\"button\" onClick={handleNext} disabled={isNextDisabled}>\n        {isLastStep ? 'Finish' : 'Next'}\n      </button>\n    </>\n  )}\n</FormikWizard>\n")))}u.isMDXComponent=!0}}]);